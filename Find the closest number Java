üîç Problem: Given a sorted array of positive integers and a target number, find the closest value to the target in the array. If there are multiple closest values, return the greater one.

üí° Solution: Implement a function that efficiently finds the closest value using binary search.

‚úÖ Key Points:

Efficiency: The algorithm has a time complexity of O(log n).
Handling Duplicates: Accounts for duplicate values in the array.
Optimized: Uses binary search for faster search in sorted arrays.
üíª Tech Skills: Binary search, array manipulation, handling edge cases.

Solution :


//{ Driver Code Starts
import java.io.*;
import java.util.*;


class IntArray
{
    public static int[] input(BufferedReader br, int n) throws IOException
    {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = Integer.parseInt(s[i]);

        return a;
    }

    public static void print(int[] a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }

    public static void print(ArrayList<Integer> a)
    {
        for(int e : a)
            System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int n;
            n = Integer.parseInt(br.readLine());
            
            
            int k;
            k = Integer.parseInt(br.readLine());
            
            
            int[] arr = IntArray.input(br, n);
            
            Solution obj = new Solution();
            int res = obj.findClosest(n, k, arr);
            
            System.out.println(res);
            
        }
    }
}

// } Driver Code Ends



class Solution {
    public static int findClosest(int n, int k, int[] arr) {
      int minDiff = Integer.MAX_VALUE;
      int closest = 0;
      
      int low = 0;
      int high = n - 1;
      while( low <= high) {
          int mid = (low + high) / 2;
          int diff = Math.abs(arr[mid] - k);
          
          if ( diff < minDiff || (diff == minDiff && arr[mid] > closest )) {
              minDiff = diff;
              closest =arr[mid];
              
          }
          
          
          if (k < arr[mid]) {
              high = mid - 1;
          } else if (k > arr[mid]){
          low = mid + 1;
           }else {
          return k;
      }
    }
    return closest;
}
}
        
